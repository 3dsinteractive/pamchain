/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type TokensContributed = ContractEventLog<{
  from: string;
  token: string;
  amount: string;
  credit: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface IPoolInitializer extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IPoolInitializer;
  clone(): IPoolInitializer;
  methods: {
    initialize(
      poolAddress: string,
      tokens: string[],
      amounts: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    finish(): NonPayableTransactionObject<void>;

    "claimTokens()"(): NonPayableTransactionObject<void>;

    "claimTokens(address)"(account: string): NonPayableTransactionObject<void>;

    "claimTokens(address[])"(
      accounts: string[]
    ): NonPayableTransactionObject<void>;

    "contributeTokens(address,uint256,uint256)"(
      token: string,
      amountIn: number | string | BN,
      minimumCredit: number | string | BN
    ): NonPayableTransactionObject<string>;

    "contributeTokens(address[],uint256[],uint256)"(
      tokens: string[],
      amountsIn: (number | string | BN)[],
      minimumCredit: number | string | BN
    ): NonPayableTransactionObject<string>;

    updatePrices(): NonPayableTransactionObject<void>;

    isFinished(): NonPayableTransactionObject<boolean>;

    getTotalCredit(): NonPayableTransactionObject<string>;

    getCreditOf(account: string): NonPayableTransactionObject<string>;

    getDesiredTokens(): NonPayableTransactionObject<string[]>;

    getDesiredAmount(token: string): NonPayableTransactionObject<string>;

    getDesiredAmounts(tokens: string[]): NonPayableTransactionObject<string[]>;

    getCreditForTokens(
      token: string,
      amountIn: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    TokensContributed(cb?: Callback<TokensContributed>): EventEmitter;
    TokensContributed(
      options?: EventOptions,
      cb?: Callback<TokensContributed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "TokensContributed", cb: Callback<TokensContributed>): void;
  once(
    event: "TokensContributed",
    options: EventOptions,
    cb: Callback<TokensContributed>
  ): void;
}
