/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CategoryAdded = ContractEventLog<{
  categoryID: string;
  metadataHash: string;
  0: string;
  1: string;
}>;
export type CategorySorted = ContractEventLog<{
  categoryID: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type TokenAdded = ContractEventLog<{
  token: string;
  categoryID: string;
  0: string;
  1: string;
}>;
export type TokenRemoved = ContractEventLog<{
  token: string;
  categoryID: string;
  0: string;
  1: string;
}>;

export interface MarketCapSortedTokenCategories extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MarketCapSortedTokenCategories;
  clone(): MarketCapSortedTokenCategories;
  methods: {
    categoryIndex(): NonPayableTransactionObject<string>;

    oracle(): NonPayableTransactionObject<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    /**
     * Initialize the categories with the owner address. This sets up the contract which is deployed as a singleton proxy.
     */
    initialize(): NonPayableTransactionObject<void>;

    /**
     * Updates the prices on the oracle for all the tokens in a category.
     */
    updateCategoryPrices(
      categoryID: number | string | BN
    ): NonPayableTransactionObject<boolean[]>;

    /**
     * Creates a new token category.
     * @param metadataHash Hash of metadata about the token category which can be distributed on IPFS.
     */
    createCategory(
      metadataHash: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * Adds a new token to a category.
     * @param categoryID Category identifier.
     * @param token Token to add to the category.
     */
    addToken(
      categoryID: number | string | BN,
      token: string
    ): NonPayableTransactionObject<void>;

    /**
     * Add tokens to a category.
     * @param categoryID Category identifier.
     * @param tokens Array of tokens to add to the category.
     */
    addTokens(
      categoryID: number | string | BN,
      tokens: string[]
    ): NonPayableTransactionObject<void>;

    /**
     * Remove token from a category.
     * @param categoryID Category identifier.
     * @param token Token to remove from the category.
     */
    removeToken(
      categoryID: number | string | BN,
      token: string
    ): NonPayableTransactionObject<void>;

    /**
     * Sorts a category's tokens in descending order by market cap. Note: Uses in-memory insertion sort.
     * @param categoryID Category to sort
     */
    orderCategoryTokensByMarketCap(
      categoryID: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * Compute the average market cap of a token in weth. Queries the average amount of ether that the total supply is worth using the recent moving average price.
     */
    computeAverageMarketCap(token: string): NonPayableTransactionObject<string>;

    /**
     * Returns the average market cap for each token.
     */
    computeAverageMarketCaps(
      tokens: string[]
    ): NonPayableTransactionObject<string[]>;

    /**
     * Returns a boolean stating whether a category exists.
     */
    hasCategory(
      categoryID: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    /**
     * Returns the timestamp of the last time the category was sorted.
     */
    getLastCategoryUpdate(
      categoryID: number | string | BN
    ): NonPayableTransactionObject<string>;

    /**
     * Returns boolean stating whether `token` is a member of the category `categoryID`.
     */
    isTokenInCategory(
      categoryID: number | string | BN,
      token: string
    ): NonPayableTransactionObject<boolean>;

    /**
     * Returns the array of tokens in a category.
     */
    getCategoryTokens(
      categoryID: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    /**
     * Returns the fully diluted market caps for the tokens in a category.
     */
    getCategoryMarketCaps(
      categoryID: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    /**
     * Get the top `num` tokens in a category. Note: The category must have been sorted by market cap in the last `MAX_SORT_DELAY` seconds.
     */
    getTopCategoryTokens(
      categoryID: number | string | BN,
      num: number | string | BN
    ): NonPayableTransactionObject<string[]>;
  };
  events: {
    CategoryAdded(cb?: Callback<CategoryAdded>): EventEmitter;
    CategoryAdded(
      options?: EventOptions,
      cb?: Callback<CategoryAdded>
    ): EventEmitter;

    CategorySorted(cb?: Callback<CategorySorted>): EventEmitter;
    CategorySorted(
      options?: EventOptions,
      cb?: Callback<CategorySorted>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    TokenAdded(cb?: Callback<TokenAdded>): EventEmitter;
    TokenAdded(options?: EventOptions, cb?: Callback<TokenAdded>): EventEmitter;

    TokenRemoved(cb?: Callback<TokenRemoved>): EventEmitter;
    TokenRemoved(
      options?: EventOptions,
      cb?: Callback<TokenRemoved>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "CategoryAdded", cb: Callback<CategoryAdded>): void;
  once(
    event: "CategoryAdded",
    options: EventOptions,
    cb: Callback<CategoryAdded>
  ): void;

  once(event: "CategorySorted", cb: Callback<CategorySorted>): void;
  once(
    event: "CategorySorted",
    options: EventOptions,
    cb: Callback<CategorySorted>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "TokenAdded", cb: Callback<TokenAdded>): void;
  once(
    event: "TokenAdded",
    options: EventOptions,
    cb: Callback<TokenAdded>
  ): void;

  once(event: "TokenRemoved", cb: Callback<TokenRemoved>): void;
  once(
    event: "TokenRemoved",
    options: EventOptions,
    cb: Callback<TokenRemoved>
  ): void;
}
