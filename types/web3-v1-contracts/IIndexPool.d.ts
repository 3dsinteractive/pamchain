/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type LOG_DENORM_UPDATED = ContractEventLog<{
  token: string;
  newDenorm: string;
  0: string;
  1: string;
}>;
export type LOG_DESIRED_DENORM_SET = ContractEventLog<{
  token: string;
  desiredDenorm: string;
  0: string;
  1: string;
}>;
export type LOG_EXIT = ContractEventLog<{
  caller: string;
  tokenOut: string;
  tokenAmountOut: string;
  0: string;
  1: string;
  2: string;
}>;
export type LOG_JOIN = ContractEventLog<{
  caller: string;
  tokenIn: string;
  tokenAmountIn: string;
  0: string;
  1: string;
  2: string;
}>;
export type LOG_MAX_TOKENS_UPDATED = ContractEventLog<{
  maxPoolTokens: string;
  0: string;
}>;
export type LOG_MINIMUM_BALANCE_UPDATED = ContractEventLog<{
  token: string;
  minimumBalance: string;
  0: string;
  1: string;
}>;
export type LOG_PUBLIC_SWAP_ENABLED = ContractEventLog<{}>;
export type LOG_SWAP = ContractEventLog<{
  caller: string;
  tokenIn: string;
  tokenOut: string;
  tokenAmountIn: string;
  tokenAmountOut: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type LOG_SWAP_FEE_UPDATED = ContractEventLog<{
  swapFee: string;
  0: string;
}>;
export type LOG_TOKEN_ADDED = ContractEventLog<{
  token: string;
  desiredDenorm: string;
  minimumBalance: string;
  0: string;
  1: string;
  2: string;
}>;
export type LOG_TOKEN_READY = ContractEventLog<{
  token: string;
  0: string;
}>;
export type LOG_TOKEN_REMOVED = ContractEventLog<{
  token: string;
  0: string;
}>;

export interface IIndexPool extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IIndexPool;
  clone(): IIndexPool;
  methods: {
    configure(
      controller: string,
      name: string,
      symbol: string
    ): NonPayableTransactionObject<void>;

    initialize(
      tokens: string[],
      balances: (number | string | BN)[],
      denorms: (number | string | BN)[],
      tokenProvider: string,
      unbindHandler: string
    ): NonPayableTransactionObject<void>;

    setMaxPoolTokens(
      maxPoolTokens: number | string | BN
    ): NonPayableTransactionObject<void>;

    setSwapFee(
      swapFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    delegateCompLikeToken(
      token: string,
      delegatee: string
    ): NonPayableTransactionObject<void>;

    reweighTokens(
      tokens: string[],
      desiredDenorms: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    reindexTokens(
      tokens: string[],
      desiredDenorms: (number | string | BN)[],
      minimumBalances: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    setMinimumBalance(
      token: string,
      minimumBalance: number | string | BN
    ): NonPayableTransactionObject<void>;

    joinPool(
      poolAmountOut: number | string | BN,
      maxAmountsIn: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    joinswapExternAmountIn(
      tokenIn: string,
      tokenAmountIn: number | string | BN,
      minPoolAmountOut: number | string | BN
    ): NonPayableTransactionObject<string>;

    joinswapPoolAmountOut(
      tokenIn: string,
      poolAmountOut: number | string | BN,
      maxAmountIn: number | string | BN
    ): NonPayableTransactionObject<string>;

    exitPool(
      poolAmountIn: number | string | BN,
      minAmountsOut: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    exitswapPoolAmountIn(
      tokenOut: string,
      poolAmountIn: number | string | BN,
      minAmountOut: number | string | BN
    ): NonPayableTransactionObject<string>;

    exitswapExternAmountOut(
      tokenOut: string,
      tokenAmountOut: number | string | BN,
      maxPoolAmountIn: number | string | BN
    ): NonPayableTransactionObject<string>;

    gulp(token: string): NonPayableTransactionObject<void>;

    flashBorrow(
      recipient: string,
      token: string,
      amount: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    swapExactAmountIn(
      tokenIn: string,
      tokenAmountIn: number | string | BN,
      tokenOut: string,
      minAmountOut: number | string | BN,
      maxPrice: number | string | BN
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    swapExactAmountOut(
      tokenIn: string,
      maxAmountIn: number | string | BN,
      tokenOut: string,
      tokenAmountOut: number | string | BN,
      maxPrice: number | string | BN
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    isPublicSwap(): NonPayableTransactionObject<boolean>;

    getSwapFee(): NonPayableTransactionObject<string>;

    getController(): NonPayableTransactionObject<string>;

    getMaxPoolTokens(): NonPayableTransactionObject<string>;

    isBound(t: string): NonPayableTransactionObject<boolean>;

    getNumTokens(): NonPayableTransactionObject<string>;

    getCurrentTokens(): NonPayableTransactionObject<string[]>;

    getCurrentDesiredTokens(): NonPayableTransactionObject<string[]>;

    getDenormalizedWeight(token: string): NonPayableTransactionObject<string>;

    getTokenRecord(
      token: string
    ): NonPayableTransactionObject<
      [boolean, boolean, string, string, string, string, string]
    >;

    extrapolatePoolValueFromToken(): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    getTotalDenormalizedWeight(): NonPayableTransactionObject<string>;

    getBalance(token: string): NonPayableTransactionObject<string>;

    getMinimumBalance(token: string): NonPayableTransactionObject<string>;

    getUsedBalance(token: string): NonPayableTransactionObject<string>;

    getSpotPrice(
      tokenIn: string,
      tokenOut: string
    ): NonPayableTransactionObject<string>;
  };
  events: {
    LOG_DENORM_UPDATED(cb?: Callback<LOG_DENORM_UPDATED>): EventEmitter;
    LOG_DENORM_UPDATED(
      options?: EventOptions,
      cb?: Callback<LOG_DENORM_UPDATED>
    ): EventEmitter;

    LOG_DESIRED_DENORM_SET(cb?: Callback<LOG_DESIRED_DENORM_SET>): EventEmitter;
    LOG_DESIRED_DENORM_SET(
      options?: EventOptions,
      cb?: Callback<LOG_DESIRED_DENORM_SET>
    ): EventEmitter;

    LOG_EXIT(cb?: Callback<LOG_EXIT>): EventEmitter;
    LOG_EXIT(options?: EventOptions, cb?: Callback<LOG_EXIT>): EventEmitter;

    LOG_JOIN(cb?: Callback<LOG_JOIN>): EventEmitter;
    LOG_JOIN(options?: EventOptions, cb?: Callback<LOG_JOIN>): EventEmitter;

    LOG_MAX_TOKENS_UPDATED(cb?: Callback<LOG_MAX_TOKENS_UPDATED>): EventEmitter;
    LOG_MAX_TOKENS_UPDATED(
      options?: EventOptions,
      cb?: Callback<LOG_MAX_TOKENS_UPDATED>
    ): EventEmitter;

    LOG_MINIMUM_BALANCE_UPDATED(
      cb?: Callback<LOG_MINIMUM_BALANCE_UPDATED>
    ): EventEmitter;
    LOG_MINIMUM_BALANCE_UPDATED(
      options?: EventOptions,
      cb?: Callback<LOG_MINIMUM_BALANCE_UPDATED>
    ): EventEmitter;

    LOG_PUBLIC_SWAP_ENABLED(
      cb?: Callback<LOG_PUBLIC_SWAP_ENABLED>
    ): EventEmitter;
    LOG_PUBLIC_SWAP_ENABLED(
      options?: EventOptions,
      cb?: Callback<LOG_PUBLIC_SWAP_ENABLED>
    ): EventEmitter;

    LOG_SWAP(cb?: Callback<LOG_SWAP>): EventEmitter;
    LOG_SWAP(options?: EventOptions, cb?: Callback<LOG_SWAP>): EventEmitter;

    LOG_SWAP_FEE_UPDATED(cb?: Callback<LOG_SWAP_FEE_UPDATED>): EventEmitter;
    LOG_SWAP_FEE_UPDATED(
      options?: EventOptions,
      cb?: Callback<LOG_SWAP_FEE_UPDATED>
    ): EventEmitter;

    LOG_TOKEN_ADDED(cb?: Callback<LOG_TOKEN_ADDED>): EventEmitter;
    LOG_TOKEN_ADDED(
      options?: EventOptions,
      cb?: Callback<LOG_TOKEN_ADDED>
    ): EventEmitter;

    LOG_TOKEN_READY(cb?: Callback<LOG_TOKEN_READY>): EventEmitter;
    LOG_TOKEN_READY(
      options?: EventOptions,
      cb?: Callback<LOG_TOKEN_READY>
    ): EventEmitter;

    LOG_TOKEN_REMOVED(cb?: Callback<LOG_TOKEN_REMOVED>): EventEmitter;
    LOG_TOKEN_REMOVED(
      options?: EventOptions,
      cb?: Callback<LOG_TOKEN_REMOVED>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "LOG_DENORM_UPDATED", cb: Callback<LOG_DENORM_UPDATED>): void;
  once(
    event: "LOG_DENORM_UPDATED",
    options: EventOptions,
    cb: Callback<LOG_DENORM_UPDATED>
  ): void;

  once(
    event: "LOG_DESIRED_DENORM_SET",
    cb: Callback<LOG_DESIRED_DENORM_SET>
  ): void;
  once(
    event: "LOG_DESIRED_DENORM_SET",
    options: EventOptions,
    cb: Callback<LOG_DESIRED_DENORM_SET>
  ): void;

  once(event: "LOG_EXIT", cb: Callback<LOG_EXIT>): void;
  once(event: "LOG_EXIT", options: EventOptions, cb: Callback<LOG_EXIT>): void;

  once(event: "LOG_JOIN", cb: Callback<LOG_JOIN>): void;
  once(event: "LOG_JOIN", options: EventOptions, cb: Callback<LOG_JOIN>): void;

  once(
    event: "LOG_MAX_TOKENS_UPDATED",
    cb: Callback<LOG_MAX_TOKENS_UPDATED>
  ): void;
  once(
    event: "LOG_MAX_TOKENS_UPDATED",
    options: EventOptions,
    cb: Callback<LOG_MAX_TOKENS_UPDATED>
  ): void;

  once(
    event: "LOG_MINIMUM_BALANCE_UPDATED",
    cb: Callback<LOG_MINIMUM_BALANCE_UPDATED>
  ): void;
  once(
    event: "LOG_MINIMUM_BALANCE_UPDATED",
    options: EventOptions,
    cb: Callback<LOG_MINIMUM_BALANCE_UPDATED>
  ): void;

  once(
    event: "LOG_PUBLIC_SWAP_ENABLED",
    cb: Callback<LOG_PUBLIC_SWAP_ENABLED>
  ): void;
  once(
    event: "LOG_PUBLIC_SWAP_ENABLED",
    options: EventOptions,
    cb: Callback<LOG_PUBLIC_SWAP_ENABLED>
  ): void;

  once(event: "LOG_SWAP", cb: Callback<LOG_SWAP>): void;
  once(event: "LOG_SWAP", options: EventOptions, cb: Callback<LOG_SWAP>): void;

  once(event: "LOG_SWAP_FEE_UPDATED", cb: Callback<LOG_SWAP_FEE_UPDATED>): void;
  once(
    event: "LOG_SWAP_FEE_UPDATED",
    options: EventOptions,
    cb: Callback<LOG_SWAP_FEE_UPDATED>
  ): void;

  once(event: "LOG_TOKEN_ADDED", cb: Callback<LOG_TOKEN_ADDED>): void;
  once(
    event: "LOG_TOKEN_ADDED",
    options: EventOptions,
    cb: Callback<LOG_TOKEN_ADDED>
  ): void;

  once(event: "LOG_TOKEN_READY", cb: Callback<LOG_TOKEN_READY>): void;
  once(
    event: "LOG_TOKEN_READY",
    options: EventOptions,
    cb: Callback<LOG_TOKEN_READY>
  ): void;

  once(event: "LOG_TOKEN_REMOVED", cb: Callback<LOG_TOKEN_REMOVED>): void;
  once(
    event: "LOG_TOKEN_REMOVED",
    options: EventOptions,
    cb: Callback<LOG_TOKEN_REMOVED>
  ): void;
}
