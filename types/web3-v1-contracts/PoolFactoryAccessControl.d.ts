/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AdminAccessGranted = ContractEventLog<{
  newAdmin: string;
  0: string;
}>;
export type AdminAccessRevoked = ContractEventLog<{
  newAdmin: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface PoolFactoryAccessControl extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PoolFactoryAccessControl;
  clone(): PoolFactoryAccessControl;
  methods: {
    hasAdminAccess(arg0: string): NonPayableTransactionObject<boolean>;

    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>;

    poolFactory(): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    /**
     * Transfer ownership of the pool factory to another account.
     */
    transferPoolFactoryOwnership(
      newOwner: string
    ): NonPayableTransactionObject<void>;

    /**
     * Grants admin access to `admin`.
     */
    grantAdminAccess(admin: string): NonPayableTransactionObject<void>;

    /**
     * Revokes admin access from `admin`.
     */
    revokeAdminAccess(admin: string): NonPayableTransactionObject<void>;

    /**
     * Removes the ability of `controller` to deploy pools.
     */
    disapprovePoolController(
      controller: string
    ): NonPayableTransactionObject<void>;

    /**
     * Approves `controller` to deploy pools.
     */
    approvePoolController(
      controller: string
    ): NonPayableTransactionObject<void>;
  };
  events: {
    AdminAccessGranted(cb?: Callback<AdminAccessGranted>): EventEmitter;
    AdminAccessGranted(
      options?: EventOptions,
      cb?: Callback<AdminAccessGranted>
    ): EventEmitter;

    AdminAccessRevoked(cb?: Callback<AdminAccessRevoked>): EventEmitter;
    AdminAccessRevoked(
      options?: EventOptions,
      cb?: Callback<AdminAccessRevoked>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AdminAccessGranted", cb: Callback<AdminAccessGranted>): void;
  once(
    event: "AdminAccessGranted",
    options: EventOptions,
    cb: Callback<AdminAccessGranted>
  ): void;

  once(event: "AdminAccessRevoked", cb: Callback<AdminAccessRevoked>): void;
  once(
    event: "AdminAccessRevoked",
    options: EventOptions,
    cb: Callback<AdminAccessRevoked>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
