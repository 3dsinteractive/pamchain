/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewTokensToSell = ContractEventLog<{
  token: string;
  amountReceived: string;
  0: string;
  1: string;
}>;
export type PremiumPercentSet = ContractEventLog<{
  premium: string;
  0: string;
}>;
export type SwappedTokens = ContractEventLog<{
  tokenSold: string;
  tokenBought: string;
  soldAmount: string;
  boughtAmount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface IUnboundTokenSeller extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IUnboundTokenSeller;
  clone(): IUnboundTokenSeller;
  methods: {
    initialize(
      pool: string,
      premiumPercent: number | string | BN
    ): NonPayableTransactionObject<void>;

    handleUnbindToken(
      token: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    setPremiumPercent(
      premiumPercent: number | string | BN
    ): NonPayableTransactionObject<void>;

    executeSwapTokensForExactTokens(
      tokenIn: string,
      tokenOut: string,
      amountOut: number | string | BN,
      path: string[]
    ): NonPayableTransactionObject<string>;

    executeSwapExactTokensForTokens(
      tokenIn: string,
      tokenOut: string,
      amountIn: number | string | BN,
      path: string[]
    ): NonPayableTransactionObject<string>;

    swapExactTokensForTokens(
      tokenIn: string,
      tokenOut: string,
      amountIn: number | string | BN,
      minAmountOut: number | string | BN
    ): NonPayableTransactionObject<string>;

    swapTokensForExactTokens(
      tokenIn: string,
      tokenOut: string,
      amountOut: number | string | BN,
      maxAmountIn: number | string | BN
    ): NonPayableTransactionObject<string>;

    getPremiumPercent(): NonPayableTransactionObject<string>;

    calcInGivenOut(
      tokenIn: string,
      tokenOut: string,
      amountOut: number | string | BN
    ): NonPayableTransactionObject<string>;

    calcOutGivenIn(
      tokenIn: string,
      tokenOut: string,
      amountIn: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    NewTokensToSell(cb?: Callback<NewTokensToSell>): EventEmitter;
    NewTokensToSell(
      options?: EventOptions,
      cb?: Callback<NewTokensToSell>
    ): EventEmitter;

    PremiumPercentSet(cb?: Callback<PremiumPercentSet>): EventEmitter;
    PremiumPercentSet(
      options?: EventOptions,
      cb?: Callback<PremiumPercentSet>
    ): EventEmitter;

    SwappedTokens(cb?: Callback<SwappedTokens>): EventEmitter;
    SwappedTokens(
      options?: EventOptions,
      cb?: Callback<SwappedTokens>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewTokensToSell", cb: Callback<NewTokensToSell>): void;
  once(
    event: "NewTokensToSell",
    options: EventOptions,
    cb: Callback<NewTokensToSell>
  ): void;

  once(event: "PremiumPercentSet", cb: Callback<PremiumPercentSet>): void;
  once(
    event: "PremiumPercentSet",
    options: EventOptions,
    cb: Callback<PremiumPercentSet>
  ): void;

  once(event: "SwappedTokens", cb: Callback<SwappedTokens>): void;
  once(
    event: "SwappedTokens",
    options: EventOptions,
    cb: Callback<SwappedTokens>
  ): void;
}
