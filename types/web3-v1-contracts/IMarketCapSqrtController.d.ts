/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CategoryAdded = ContractEventLog<{
  categoryID: string;
  metadataHash: string;
  0: string;
  1: string;
}>;
export type CategorySorted = ContractEventLog<{
  categoryID: string;
  0: string;
}>;
export type NewPoolInitializer = ContractEventLog<{
  pool: string;
  initializer: string;
  categoryID: string;
  indexSize: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type PoolInitialized = ContractEventLog<{
  pool: string;
  unboundTokenSeller: string;
  categoryID: string;
  indexSize: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type TokenAdded = ContractEventLog<{
  token: string;
  categoryID: string;
  0: string;
  1: string;
}>;

export interface IMarketCapSqrtController extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IMarketCapSqrtController;
  clone(): IMarketCapSqrtController;
  methods: {
    updateCategoryPrices(
      categoryID: number | string | BN
    ): NonPayableTransactionObject<void>;

    createCategory(
      metadataHash: string | number[]
    ): NonPayableTransactionObject<void>;

    addToken(
      categoryID: number | string | BN,
      token: string
    ): NonPayableTransactionObject<void>;

    addTokens(
      categoryID: number | string | BN,
      tokens: string[]
    ): NonPayableTransactionObject<void>;

    removeToken(
      categoryID: number | string | BN,
      token: string
    ): NonPayableTransactionObject<void>;

    orderCategoryTokensByMarketCap(
      categoryID: number | string | BN
    ): NonPayableTransactionObject<void>;

    categoryIndex(): NonPayableTransactionObject<string>;

    oracle(): NonPayableTransactionObject<string>;

    computeAverageMarketCap(token: string): NonPayableTransactionObject<string>;

    computeAverageMarketCaps(
      tokens: string[]
    ): NonPayableTransactionObject<string[]>;

    hasCategory(
      categoryID: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    getLastCategoryUpdate(
      categoryID: number | string | BN
    ): NonPayableTransactionObject<string>;

    isTokenInCategory(
      categoryID: number | string | BN,
      token: string
    ): NonPayableTransactionObject<boolean>;

    getCategoryTokens(
      categoryID: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    getCategoryMarketCaps(
      categoryID: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    getTopCategoryTokens(
      categoryID: number | string | BN,
      num: number | string | BN
    ): NonPayableTransactionObject<string[]>;
  };
  events: {
    CategoryAdded(cb?: Callback<CategoryAdded>): EventEmitter;
    CategoryAdded(
      options?: EventOptions,
      cb?: Callback<CategoryAdded>
    ): EventEmitter;

    CategorySorted(cb?: Callback<CategorySorted>): EventEmitter;
    CategorySorted(
      options?: EventOptions,
      cb?: Callback<CategorySorted>
    ): EventEmitter;

    NewPoolInitializer(cb?: Callback<NewPoolInitializer>): EventEmitter;
    NewPoolInitializer(
      options?: EventOptions,
      cb?: Callback<NewPoolInitializer>
    ): EventEmitter;

    PoolInitialized(cb?: Callback<PoolInitialized>): EventEmitter;
    PoolInitialized(
      options?: EventOptions,
      cb?: Callback<PoolInitialized>
    ): EventEmitter;

    TokenAdded(cb?: Callback<TokenAdded>): EventEmitter;
    TokenAdded(options?: EventOptions, cb?: Callback<TokenAdded>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "CategoryAdded", cb: Callback<CategoryAdded>): void;
  once(
    event: "CategoryAdded",
    options: EventOptions,
    cb: Callback<CategoryAdded>
  ): void;

  once(event: "CategorySorted", cb: Callback<CategorySorted>): void;
  once(
    event: "CategorySorted",
    options: EventOptions,
    cb: Callback<CategorySorted>
  ): void;

  once(event: "NewPoolInitializer", cb: Callback<NewPoolInitializer>): void;
  once(
    event: "NewPoolInitializer",
    options: EventOptions,
    cb: Callback<NewPoolInitializer>
  ): void;

  once(event: "PoolInitialized", cb: Callback<PoolInitialized>): void;
  once(
    event: "PoolInitialized",
    options: EventOptions,
    cb: Callback<PoolInitialized>
  ): void;

  once(event: "TokenAdded", cb: Callback<TokenAdded>): void;
  once(
    event: "TokenAdded",
    options: EventOptions,
    cb: Callback<TokenAdded>
  ): void;
}
