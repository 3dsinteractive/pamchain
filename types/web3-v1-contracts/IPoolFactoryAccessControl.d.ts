/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AdminAccessGranted = ContractEventLog<{
  newAdmin: string;
  0: string;
}>;
export type AdminAccessRevoked = ContractEventLog<{
  newAdmin: string;
  0: string;
}>;

export interface IPoolFactoryAccessControl extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IPoolFactoryAccessControl;
  clone(): IPoolFactoryAccessControl;
  methods: {
    poolFactory(): NonPayableTransactionObject<string>;

    hasAdminAccess(arg0: string): NonPayableTransactionObject<boolean>;

    grantAdminAccess(admin: string): NonPayableTransactionObject<void>;

    revokeAdminAccess(admin: string): NonPayableTransactionObject<void>;

    transferPoolFactoryOwnership(
      arg0: string
    ): NonPayableTransactionObject<void>;

    disapprovePoolController(arg0: string): NonPayableTransactionObject<void>;

    approvePoolController(arg0: string): NonPayableTransactionObject<void>;
  };
  events: {
    AdminAccessGranted(cb?: Callback<AdminAccessGranted>): EventEmitter;
    AdminAccessGranted(
      options?: EventOptions,
      cb?: Callback<AdminAccessGranted>
    ): EventEmitter;

    AdminAccessRevoked(cb?: Callback<AdminAccessRevoked>): EventEmitter;
    AdminAccessRevoked(
      options?: EventOptions,
      cb?: Callback<AdminAccessRevoked>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AdminAccessGranted", cb: Callback<AdminAccessGranted>): void;
  once(
    event: "AdminAccessGranted",
    options: EventOptions,
    cb: Callback<AdminAccessGranted>
  ): void;

  once(event: "AdminAccessRevoked", cb: Callback<AdminAccessRevoked>): void;
  once(
    event: "AdminAccessRevoked",
    options: EventOptions,
    cb: Callback<AdminAccessRevoked>
  ): void;
}
