/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type TokensClaimed = ContractEventLog<{
  account: string;
  tokens: string;
  0: string;
  1: string;
}>;
export type TokensContributed = ContractEventLog<{
  from: string;
  token: string;
  amount: string;
  credit: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface PoolInitializer extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PoolInitializer;
  clone(): PoolInitializer;
  methods: {
    controller(): NonPayableTransactionObject<string>;

    oracle(): NonPayableTransactionObject<string>;

    /**
     * Sets up the pre-deployment pool.
     * @param amounts Desired amounts of the corresponding `tokens`
     * @param poolAddress Address of the pool this pre-deployment pool is for
     * @param tokens Array of desired tokens
     */
    initialize(
      poolAddress: string,
      tokens: string[],
      amounts: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    /**
     * Finishes the pre-deployment pool and triggers pool initialization. Note: The desired amounts of all tokens must be 0.
     */
    finish(): NonPayableTransactionObject<void>;

    /**
     * Claims the tokens owed to `msg.sender` based on their proportion of the total credits.
     */
    "claimTokens()"(): NonPayableTransactionObject<void>;

    /**
     * Claims the tokens owed to `account` based on their proportion of the total credits.
     */
    "claimTokens(address)"(account: string): NonPayableTransactionObject<void>;

    /**
     * Claims the tokens owed to `account` based on their proportion of the total credits.
     */
    "claimTokens(address[])"(
      accounts: string[]
    ): NonPayableTransactionObject<void>;

    /**
     * Contribute up to `amountIn` of `token` to the pool for credit. The caller will be credited for the average weth value of the provided tokens. Caller must receive at least `minimumCredit` to not revert. If `amountIn` is greater than the desired amount of `token`, the desired amount will be used instead.
     */
    "contributeTokens(address,uint256,uint256)"(
      token: string,
      amountIn: number | string | BN,
      minimumCredit: number | string | BN
    ): NonPayableTransactionObject<string>;

    /**
     * Contribute maximum values from `amountsIn` of the corresponding tokens in `tokens` to the pool for credit. The caller will be credited for the average weth value of the provided tokens. Caller must receive at least `minimumCredit` to not revert. If any input amount is greater than the desired amount of the corresponding token, the desired amount will be used instead.
     */
    "contributeTokens(address[],uint256[],uint256)"(
      tokens: string[],
      amountsIn: (number | string | BN)[],
      minimumCredit: number | string | BN
    ): NonPayableTransactionObject<string>;

    /**
     * Updates the prices of all tokens.
     */
    updatePrices(): NonPayableTransactionObject<void>;

    /**
     * Returns whether the pool has been initialized.
     */
    isFinished(): NonPayableTransactionObject<boolean>;

    /**
     * Returns the total value credited for token contributions.
     */
    getTotalCredit(): NonPayableTransactionObject<string>;

    /**
     * Returns the amount of credit owed to `account`.
     */
    getCreditOf(account: string): NonPayableTransactionObject<string>;

    getDesiredTokens(): NonPayableTransactionObject<string[]>;

    getDesiredAmount(token: string): NonPayableTransactionObject<string>;

    getDesiredAmounts(tokens: string[]): NonPayableTransactionObject<string[]>;

    /**
     * Get the amount of WETH the contract will credit a user for providing `amountIn` of `token`. Note: If `amountIn` is greater than the desired amount of `token`, this will calculate the output using the desired amount instead of `amountIn`.
     */
    getCreditForTokens(
      token: string,
      amountIn: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    TokensClaimed(cb?: Callback<TokensClaimed>): EventEmitter;
    TokensClaimed(
      options?: EventOptions,
      cb?: Callback<TokensClaimed>
    ): EventEmitter;

    TokensContributed(cb?: Callback<TokensContributed>): EventEmitter;
    TokensContributed(
      options?: EventOptions,
      cb?: Callback<TokensContributed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "TokensClaimed", cb: Callback<TokensClaimed>): void;
  once(
    event: "TokensClaimed",
    options: EventOptions,
    cb: Callback<TokensClaimed>
  ): void;

  once(event: "TokensContributed", cb: Callback<TokensContributed>): void;
  once(
    event: "TokensContributed",
    options: EventOptions,
    cb: Callback<TokensContributed>
  ): void;
}
