/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewPool = ContractEventLog<{
  pool: string;
  controller: string;
  implementationID: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface PoolFactory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PoolFactory;
  clone(): PoolFactory;
  methods: {
    getPoolImplementationID(arg0: string): NonPayableTransactionObject<string>;

    isApprovedController(arg0: string): NonPayableTransactionObject<boolean>;

    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>;

    proxyManager(): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    /**
     * Approves `controller` to deploy pools.
     */
    approvePoolController(
      controller: string
    ): NonPayableTransactionObject<void>;

    /**
     * Removes the ability of `controller` to deploy pools.
     */
    disapprovePoolController(
      controller: string
    ): NonPayableTransactionObject<void>;

    /**
     * Deploys a pool using an implementation ID provided by the controller. Note: To support future interfaces, this does not initialize or configure the pool, this must be executed by the controller. Note: Must be called by an approved controller.
     * @param controllerSalt Create2 salt provided by the deployer
     * @param implementationID Implementation ID for the pool
     */
    deployPool(
      implementationID: string | number[],
      controllerSalt: string | number[]
    ): NonPayableTransactionObject<string>;

    /**
     * Checks if an address is a pool that was deployed by the factory.
     */
    isRecognizedPool(pool: string): NonPayableTransactionObject<boolean>;

    /**
     * Compute the create2 address for a pool deployed by an approved controller.
     */
    computePoolAddress(
      implementationID: string | number[],
      controller: string,
      controllerSalt: string | number[]
    ): NonPayableTransactionObject<string>;
  };
  events: {
    NewPool(cb?: Callback<NewPool>): EventEmitter;
    NewPool(options?: EventOptions, cb?: Callback<NewPool>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewPool", cb: Callback<NewPool>): void;
  once(event: "NewPool", options: EventOptions, cb: Callback<NewPool>): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
