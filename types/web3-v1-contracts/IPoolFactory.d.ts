/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewPool = ContractEventLog<{
  pool: string;
  controller: string;
  implementationID: string;
  0: string;
  1: string;
  2: string;
}>;

export interface IPoolFactory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IPoolFactory;
  clone(): IPoolFactory;
  methods: {
    approvePoolController(
      controller: string
    ): NonPayableTransactionObject<void>;

    disapprovePoolController(
      controller: string
    ): NonPayableTransactionObject<void>;

    deployPool(
      implementationID: string | number[],
      controllerSalt: string | number[]
    ): NonPayableTransactionObject<string>;

    proxyManager(): NonPayableTransactionObject<string>;

    isApprovedController(arg0: string): NonPayableTransactionObject<boolean>;

    getPoolImplementationID(arg0: string): NonPayableTransactionObject<string>;

    isRecognizedPool(pool: string): NonPayableTransactionObject<boolean>;

    computePoolAddress(
      implementationID: string | number[],
      controller: string,
      controllerSalt: string | number[]
    ): NonPayableTransactionObject<string>;
  };
  events: {
    NewPool(cb?: Callback<NewPool>): EventEmitter;
    NewPool(options?: EventOptions, cb?: Callback<NewPool>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewPool", cb: Callback<NewPool>): void;
  once(event: "NewPool", options: EventOptions, cb: Callback<NewPool>): void;
}
